#include "../../include/minishell.h"$
$
void insert_pan(t_pcon *con, t_pan *new)//newM-mM-^CM-^@M-lM-^^M-^EM-lM-^]M-^X nodeM-kM-%M-< M-lM-0M->M-kM-^JM-^T M-mM-^UM-(M-lM-^HM-^X$
{$
    t_pan *current;$
$
    if (con->head == NULL)$
        con->head = new;$
    else$
    {$
        current = con->head;$
        while (current->next)$
            current = current->next;$
        current->next = new;$
    }$
    con->size++;$
}$
$
t_pan *search_pan(t_pcon *con, char *target)//M-kM-,M-8M-lM-^^M-^PM-lM-^WM-4M-jM-3M-< M-jM-0M-^YM-lM-^]M-^@ M-jM-0M-^RM-lM-^]M-^D M-jM-0M-^@M-lM-'M-^@M-jM-3M-  M-lM-^^M-^HM-kM-^JM-^T nodeM-kM-%M-< M-lM-0M->M-lM-^JM-5M-kM-^KM-^HM-kM-^KM-$.$
{$
    t_pan *current;$
    int len;$
$
    len = ft_strlen(target);$
    current = con->head;$
    while (current)$
    {$
        if (!ft_strncmp(current->val, target, len))$
            return (current);     $
        current = current->next;$
    }$
    return (NULL);$
}$
$
ssize_t re_index_pan(t_pcon *con, t_pan *target)//target_nodeM-jM-0M-^@ M-kM-*M-^GM-kM-2M-^HM-lM-'M-8M-lM-^WM-^P M-kM-^SM-$M-lM-^VM-4 M-lM-^^M-^HM-kM-^JM-^T M-lM-'M-^@ M-lM-^UM-^LM-kM- M-$M-lM-$M-^L$
{$
    size_t idx;$
    t_pan *current;$
$
    idx = 0;$
    current = con->head;$
    while (current)$
    {$
        if (&*current == &*target)$
            return (idx);$
        current = current->next;$
        idx++;$
    }$
    return (-1);$
}$
$
void remove_pan(t_pcon *con, t_pan *target)//target_nodeM-kM-%M-< M-lM-^BM--M-lM- M-^\M-mM-^UM-4M-lM-$M-^MM-kM-^KM-^HM-kM-^KM-$.$
{$
    int idx;$
    int idx2;$
    t_pan *current;$
$
    idx = re_index_pan(con, target);$
    idx2 = 0;$
    if (target == NULL)$
        return ; //M-lM-^]M-4M-lM-^WM-^PM-kM-^_M-, M-lM-2M-^XM-kM-&M-, M-lM-&M-^I M-lM-^VM-4M-kM-^VM-;M-jM-2M-^L M-mM-^UM- M-lM-'M-^@ M-jM-3M- M-kM-/M-<M-lM-^^M-^EM-kM-^KM-^HM-kM-^KM-$.$
    if (idx == -1)//M-lM-^WM-^FM-kM-^JM-^T M-jM-2M-=M-lM-^ZM-0 M-lM-^WM-^PM-kM-^_M-,M-lM-2M-^XM-kM-&M-,$
        return ;$
    else if (idx == 0)$
        con->head = con->head->next;$
    else$
    {$
        current = con->head;$
        while (++idx2 < idx)$
            current = current->next;$
        current->next = target->next;$
    }$
    ft_freenull(target->val);$
    free(target);$
    con->size--;$
}$
$
void init_pcon_pan(t_pcon *env, t_pan *new, t_clear_type type)//M-lM-4M-^HM-jM-8M-0M-mM-^YM-^T M-mM-^UM-4M-lM-$M-^MM-kM-^KM-^HM-kM-^KM-$.$
{$
    if (type == LINKED_PCON)$
    {$
        env->head = NULL;$
        env->size = 0;$
    }$
    else if (type == LINKED_PAN)$
    {$
        new->next = NULL;$
        new->val = NULL;$
        new->type = T_NULL;$
    }$
}$
$
void ft_free_pcon(t_pcon *env)$
{$
    t_pan *temp;$
    t_pan *next;$
$
    temp = env->head;$
    while (temp)$
    {$
        next = temp->next;$
        ft_freenull(temp->val);$
        free(temp);$
        temp = next;$
        env->size--;$
    }$
    env->head = NULL;$
    free(env);$
    env = NULL;$
}$
$
t_pan *new_pan(char *val)$
{$
    t_pan *new;$
    new = (t_pan *)malloc(sizeof(t_pan));$
    if (!new)$
    {$
        //errorM-lM-2M-^XM-kM-&M-,M-kM-^JM-^T M-lM-^VM-4M-kM-^VM-;M-jM-2M-^L M-mM-^UM-^XM-lM-'M-^@ M-lM-^]M-^XM-kM-^EM-<M-mM-^UM-4M-lM-^UM-< M-mM-^UM-)M-kM-^KM-^HM-kM-^KM-$.$
        printf("assignment fail!\n");$
        exit(1);$
    }$
    init_pcon_pan(NULL, new, LINKED_PAN);$
    new->val = val;$
    new->type = check_type(val);$
    return (new);$
}$
$
t_in_type check_type(char *val)$
{$
    if (!ft_strncmp(val, "|", 1) && ft_strlen(val) == 1)$
        return (T_PIPE);$
    else if (!ft_strncmp(val, "<", 1) && ft_strlen(val) == 1)$
        return (T_REDIRECTION);$
    else if (!ft_strncmp(val, "<<", 2) && ft_strlen(val) == 2)$
        return (T_REDIRECTION);$
    else if (!ft_strncmp(val, ">", 1) && ft_strlen(val) == 1)$
        return (T_REDIRECTION);$
    else if (!ft_strncmp(val, ">>", 2) && ft_strlen(val) == 2)$
        return (T_REDIRECTION);$
    else if (!ft_strncmp(val, "$", 1))$
        return (T_ENV);$
    else$
        return (T_ARGV);$
}$
$
void print_pcon(t_pcon *head)$
{$
    t_pan *current;$
    const char *type[] = {"T_PIPE", "T_REDIRECTION", "T_ARGV", "T_ENV", "T_NULL"};$
    current = head->head;$
    while (current)$
    {$
        printf("val : %s\n", current->val);$
        printf("type : %s\n", type[current->type]);$
        current = current->next;$
    }$
}$
$
// int main(void)$
// {$
//     char *input;$
//     input = readline(">? ");$
//     pars(input);$
//     return (0);$
// }$
$
